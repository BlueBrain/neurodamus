/**
 * @file GluSynapseHelper.hoc
 * @brief Encapsulate any hoc actions that are necessary to instantiate this synapse type
 * @author king, chindemi
 * @date 26/04/2017
 * @remark Copyright Â© BBP/EPFL 2005-2016; All rights reserved. Do not distribute without further notice.
 */

// Global that is shared/accessible from GluSynapseHelper objects
// Note that a name should be chosen that should not be used for any other global. Otherwise may cause strange behavior
objref synapseReaderGluSynapseHelper

strdef GluSynapseHelper_NeededAttributes
GluSynapseHelper_NeededAttributes = "volume_CR;rho0_GB;Use_d_TM;Use_p_TM;gmax_d_AMPA;gmax_p_AMPA;theta_d;theta_p"

strdef GluSynapseHelper_UHillScaleVariables
GluSynapseHelper_UHillScaleVariables = "Use_d_TM;Use_p_TM"

/**
 * This helper object will encapsulate the hoc actions needed to create our plastic excitatory synapse
 */
{load_file("RNGSettings.hoc")}
begintemplate GluSynapseHelper

objref synapse
public synapse

external synapseReaderGluSynapseHelper

/**
 * @param tgid gid of Postsynaptic cell
 * @param synParameters set of paramters loaded from default nrn.h5
 * @param x location of the synapse along the section (0<=x<=1)
 * @param synapseID id assigned to this synapses within the cell's context
 * @param baseSeed for random number generator
 * @param parseConnection Map of field/value pairs of Connection block taken from ConfigParser
 */
proc init() { local tgid, x, synapseID, baseSeed, res, spopid, tpopid  localobj synParams, parseConnection, fname, rngInfo
    strdef datasetName

    tgid = $1
    synParams = $o2
    x = $3
    synapseID = $4
    baseSeed = $5
    if (numarg()>=8) {
        spopid = $6 // placeholder
        tpopid = $7 // placeholder
        parseConnection = $o8
    } else {
        parseConnection = $o6
        spopid = 0 // placeholder
        tpopid = 1 // placeholder
    }

    rngInfo = new RNGSettings()
    synapse = new GluSynapse(x)

    if( synParams.maskValue > 1 ) {
        // deactivate synapses not part of original functional circuit
        synapse.synstate_RW = 0
    }

    // Use parameters
    synapse.Use_d = synParams.Use_d_TM
    synapse.Use_p = synParams.Use_p_TM

    // Rho parameters
    synapse.theta_d_GB = synParams.theta_d
    synapse.theta_p_GB = synParams.theta_p
    synapse.rho0_GB = synParams.rho0_GB

    // Spine parameters
    synapse.volume_CR = synParams.volume_CR

    synapse.gmax_d_AMPA = synParams.gmax_d_AMPA
    synapse.gmax_p_AMPA = synParams.gmax_p_AMPA
    if (synapse.rho0_GB > rho_star_GB_GluSynapse) {
        // Instantiate peak conductance as in the potentitated state
        synapse.gmax0_AMPA = synapse.gmax_p_AMPA
    } else {
        // Instantiate peak conductance as in the depressed state
        synapse.gmax0_AMPA = synapse.gmax_d_AMPA
    }

    // Scale gmax according to the conductance ratio
    synapse.gmax_NMDA = synapse.gmax0_AMPA * synParams.conductance_ratio

    // Release parameters
    synapse.tau_d_AMPA = synParams.DTC
    if (synapse.rho0_GB > rho_star_GB_GluSynapse) {
        // Instantiate a potentiated synapse
        synapse.Use = synapse.Use_p
    } else {
        // Instantiate a depressed synapse
        synapse.Use = synapse.Use_d
    }
    synapse.Dep = abs( synParams.D )
    synapse.Fac = abs( synParams.F )

    if( synParams.nrrp >= 0 ) {
        synapse.Nrrp = synParams.nrrp
    }

    // for now, use two seeds based on gid and snyapseID.  In the future we will have an optional synapseSeed
    // also note that somewhere we must have set the random123 global seed (BlueConfig BaseSeed)
    synapse.setRNG( tgid, 100000 + synapseID, rngInfo.getSynapseSeed() + 200)
    synapse.synapseID = synapseID
}

endtemplate GluSynapseHelper

