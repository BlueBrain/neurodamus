name: neurodamus build and test
on:
  schedule:
    # every evening at 20:00 UTC
    - cron: '0 20 * * *'
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      NEURON_BRANCH:
        description: 'NEURON branch to use'
        required: false
      LIBSONATA_REPORT_BRANCH:
        description: 'libsonatareport branch to use'
        required: false
      LIBSONATA_BRANCH:
        description: 'libsonata branch to use'
        required: false

env:
  NEURON_COMMIT_ID: '13654b3'
  NEURON_BRANCH: ${{ inputs.NEURON_BRANCH || 'master' }}
  LIBSONATA_REPORT_BRANCH: ${{ inputs.LIBSONATA_REPORT_BRANCH || '1.2.3' }}
  LIBSONATA_BRANCH: ${{ inputs.LIBSONATA_BRANCH || 'v0.1.26' }}

jobs:
  simulation:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Checkout neurodamus repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ matrix.os }}-pip-${{ matrix.python-version }}-v1
        restore-keys: |
          ${{ matrix.os }}-pip-

    - name: Get HEAD commit message and look for branches
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo $COMMIT_MESSAGE
        NEURON_BRANCH=$(echo $COMMIT_MESSAGE | grep -Po 'NEURON_BRANCH=\K[0-9a-zA-Z/_.\-]*' || true)
        if [[ ! -z $NEURON_BRANCH ]]; then echo "NEURON_BRANCH=$NEURON_BRANCH" >> $GITHUB_ENV; fi
        LIBSONATA_REPORT_BRANCH=$(echo $COMMIT_MESSAGE | grep -Po 'LIBSONATA_REPORT_BRANCH=\K[0-9a-zA-Z/_.\-]*' || true)
        if [[ ! -z $LIBSONATA_REPORT_BRANCH ]]; then echo "LIBSONATA_REPORT_BRANCH=$LIBSONATA_REPORT_BRANCH" >> $GITHUB_ENV; fi
        LIBSONATA_BRANCH=$(echo $COMMIT_MESSAGE | grep -Po 'LIBSONATA_BRANCH=\K[0-9a-zA-Z/_.\-]*' || true)
        if [[ ! -z $LIBSONATA_BRANCH ]]; then echo "LIBSONATA_BRANCH=$LIBSONATA_BRANCH" >> $GITHUB_ENV; fi

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mpich libmpich-dev libhdf5-mpich-dev hdf5-tools flex libfl-dev bison ninja-build

    - name: Cache python virtual env
      id: cache-venv
      uses: actions/cache@v3
      env:
        cache-name: cache-venv
      with:
        path: venv
        key: ${{ matrix.os }}-libsonata-${{ env.LIBSONATA_BRANCH }}-py${{ matrix.python-version }}

    - name: Upgrade pip and install base Python packages
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python -m venv venv
        . ./venv/bin/activate
        python -m pip install --upgrade pip setuptools
        pip install cython numpy wheel pkgconfig

    - name: Install libsonata
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        . ./venv/bin/activate
        CC=mpicc CXX=mpic++ pip install git+https://github.com/BlueBrain/libsonata

    - name: Cache libsonatareport
      id: cache-libsonatareport
      uses: actions/cache@v3
      env:
        cache-name: cache-libsonatareport
      with:
        path: libsonatareport
        key: ${{ matrix.os }}-libsonatareport-${{ env.LIBSONATA_REPORT_BRANCH }}-py${{ matrix.python-version }}

    - name: Install libsonatareport
      if: steps.cache-libsonatareport.outputs.cache-hit != 'true'
      run: |
        git clone --branch="${{ env.LIBSONATA_REPORT_BRANCH}}" https://github.com/BlueBrain/libsonatareport.git --recursive --depth=1
        cd libsonatareport
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install -DCMAKE_BUILD_TYPE=Release -DSONATA_REPORT_ENABLE_SUBMODULES=ON -DSONATA_REPORT_ENABLE_MPI=ON ..
        cmake --build . --parallel
        cmake --build . --target install

    - name: Cache NEURON
      id: cache-neuron
      uses: actions/cache@v3
      env:
        cache-name: cache-neuron
      with:
        path: nrn
        key: ${{ matrix.os }}-neuron-${{ env.NEURON_BRANCH }}-${{ env.NEURON_COMMIT_ID }}-py${{ matrix.python-version }}

    - name: Install NEURON
      if: steps.cache-neuron.outputs.cache-hit != 'true'
      run: |
        export SONATAREPORT_DIR=$(pwd)/libsonatareport/build/install
        sudo apt-get install flex libfl-dev bison ninja-build
        if [[ ${{ env.NEURON_BRANCH }} == 'master' ]]; then
          git clone --branch=${{ env.NEURON_BRANCH }} https://github.com/neuronsimulator/nrn.git
          cd nrn
          git checkout ${{ env.NEURON_COMMIT_ID }}
          cd ..
        else
          git clone --branch=${{ env.NEURON_BRANCH }} https://github.com/neuronsimulator/nrn.git --depth=1
        fi
        . ./venv/bin/activate
        python -m pip install --upgrade pip -r nrn/nrn_requirements.txt
        cmake -B nrn/build -S nrn -G Ninja \
          -DPYTHON_EXECUTABLE=$(which python) \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/nrn/build/install \
          -DNRN_ENABLE_MPI=ON \
          -DNRN_ENABLE_INTERVIEWS=OFF \
          -DNRN_ENABLE_CORENEURON=ON \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCORENRN_ENABLE_REPORTING=ON \
          -DCMAKE_PREFIX_PATH=$SONATAREPORT_DIR
        cmake --build nrn/build --parallel
        cmake --build nrn/build --target install

    - name: Install mpi4py
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        . ./venv/bin/activate
        pip install mpi4py

    - name: Build h5py with the local hdf5
      run: |
        . ./venv/bin/activate
        pip install cython numpy wheel pkgconfig
        CC="mpicc" HDF5_MPI="ON" HDF5_INCLUDEDIR=/usr/include/hdf5/mpich HDF5_LIBDIR=/usr/lib/x86_64-linux-gnu/hdf5/mpich \
          pip install --no-cache-dir --no-binary=h5py h5py --no-build-isolation

    - name: Install neurodamus
      run: |
        . ./venv/bin/activate
        pip install .

    - name: Build models
      run: |
        export SONATAREPORT_DIR=$(pwd)/libsonatareport/build/install
        export PATH=$(pwd)/nrn/build/install/bin:$PATH
        # copy mod files from the Zenodo link
        wget --output-document="O1_mods.xz" --quiet "https://zenodo.org/record/8026353/files/O1_mods.xz?download=1"
        tar -xf O1_mods.xz
        cp -r mod tests/share/
        cp neurodamus/data/mod/*.mod tests/share/mod/
        ./docker/build_neurodamus.sh tests/share/mod

    - name: Example run
      run: |
        . ./venv/bin/activate
        if [ ${{ matrix.python-version }} == 3.9 ]; then
          export RDMAV_FORK_SAFE=1
        fi;
        export PYTHONPATH=$(pwd)/nrn/build/lib/python:$PYTHONPATH
        cp neurodamus/data/hoc/* tests/share/hoc/
        export HOC_LIBRARY_PATH=$(pwd)/tests/share/hoc
        export NEURODAMUS_PYTHON=$(pwd)/neurodamus/data
        export CORENEURONLIB=$(pwd)/x86_64/libcorenrnmech.so
        export PATH=$(pwd)/x86_64:$PATH
        which special

        # launch simulation with NEURON
        cd tests/simulations/usecase3/
        mpirun -np 2 special -mpi -python $NEURODAMUS_PYTHON/init.py --configFile=simulation_sonata.json
        ls reporting/*.h5
        # launch simulation with CORENEURON
        mpirun -np 2 special -mpi -python $NEURODAMUS_PYTHON/init.py --configFile=simulation_sonata_coreneuron.json
        ls reporting_coreneuron/*.h5

    # - name: live debug session, comment out
    #   if: failure()
    #   uses: mxschmitt/action-tmate@v3
