/**
 * @file CompartmentMapping.hoc
 * @brief Implement interface to register section segment mapping with NEURON.
 * @remark Copyright Â© BBP/EPFL 2005-2017; All rights reserved. Do not distribute without further notice.
 */

{nrnpython( "import mapping" )}

// global object which python will manipulate
objref secvec
objref segvec
objref lfp_factors

/*!
 * Get the number of sections of certain type
 * @param $o1 Cell object who owns the currently accessed section
 * @param $s2 Section name
 * @return number of sections of certain type
 */
func get_num_sec() { local num_sections localobj strobj, cellref
    strdef section_name
    strobj = new StringFunctions()
    cellref = $o1
    section_name = $s2
    num_sections = 0
    if(strcmp( section_name, "ais" ) == 0) {
        result = execute1( "{nSecLastAIS}", cellref, 0 )
        if( result != 0 ) {
            num_sections = cellref.nSecLastAIS
        }
    } else if(strcmp( section_name, "node" ) == 0) {
        result = execute1( "{nSecNodal}", cellref, 0 )
        if( result != 0 ) {
            num_sections = cellref.nSecNodal
        }
    }
    return num_sections
}

/*!
 * Determine the absolute index of a section within the cell
 * @param $o1 Cell object who owns the currently accessed section
 * @return index which can be used to map back onto the neuron
 */
func sectionNo() { local baseOffset, secIndex  localobj str, strobj
    strdef subset, section_name
    str = new String()
    strobj = new StringFunctions()

    if( strobj.substr( secname(), "soma" ) > 0 ) {
        subset = "soma"
        baseOffset = 0
    } else if (strobj.substr( secname(), "axon") >0) {
        subset = "axon"
        baseOffset = $o1.nSecSoma
    }else if (strobj.substr( secname(), "dend") >0) {
        subset = "dend"
        baseOffset = $o1.nSecSoma + $o1.nSecAxonalOrig
    }else if (strobj.substr( secname(), "apic") > 0) {
        subset = "apic"
        baseOffset = $o1.nSecSoma + $o1.nSecAxonalOrig + $o1.nSecBasal
    } else if (strobj.substr( secname(), "ais") >0) {
        subset = "ais"
        baseOffset = $o1.nSecSoma + $o1.nSecAxonalOrig + $o1.nSecBasal + $o1.nSecApical
    } else if (strobj.substr( secname(), "node") >0) {
        subset = "node"
        baseOffset = $o1.nSecSoma + $o1.nSecAxonalOrig + $o1.nSecBasal + $o1.nSecApical + get_num_sec($o1, "ais")
    } else if (strobj.substr(secname(), "myelin") >0) {
        subset = "myelin"
        baseOffset = $o1.nSecSoma + $o1.nSecAxonalOrig + $o1.nSecBasal + $o1.nSecApical + get_num_sec($o1, "ais") + get_num_sec($o1, "node")
    }

    // parse out the index from the secname
    strobj.tail( secname(), subset, str.s )
    if (strobj.len(str.s) > 0) {
        strobj.left(str.s, strobj.len(str.s)-1) // result should look like [n
        strobj.right(str.s, 1)
        sscanf( str.s, "%d", &secIndex )
    } else {
        // todo : abort on error here
        print "Error while getting section number (should this ever happen?) !"
    }

    return baseOffset + secIndex
}

/*!
 * Register section/segment mapping to NEURON for report generation
 * todo : removing logic of target selection as its incomplete
 * @param $o1 cellDistributor object
 * @param $o2 target object
 */

proc registerMapping () { local cellIndex, activegid, nSoma, nAxon, nDend, nApic, nSec, indexSec, nSeg, val, num_electrodes \
  localobj gidvec, cellref, pyobj, pop_info, commstr, target, cellDistributor, pc, python_obj
  strdef tstr

  cellDistributor = $o1
  //target = $o2

  pyobj = new PythonObject()
  commstr = new String()
  pc = new ParallelContext()

  // list of gids on current rank
  gidvec = cellDistributor.getGidListForProcessor()
  pop_info = new PythonObject()

  for cellIndex=0, gidvec.size()-1 {
    activegid = gidvec.x[cellIndex]
    cellref = cellDistributor.getCell(activegid)
    pop_info = cellDistributor.getPopulationInfo(activegid)

    // skip gids that we don't want to report, instead of skipping
    // we should add a flag in mapping
    //if(!target.contains(activegid)) {
        //continue
    //}

    nSoma = 0
    nAxon = 0
    nDend = 0
    nApic = 0
    nAis = 0
    nNode = 0
    nMyel = 0
    nSec = 0
    indexSec = 0

    // vectors holding section and segments
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    // gather all somas and register somas with neuron
    forsec cellref.somatic {
        nSec = nSec + 1
        val = sectionNo( cellref )
        sprint( commstr.s, "mappinginfo = mapping.getNodeID(%d, %d)", val, nSoma )
        nrnpython( commstr.s )
        nSoma = pyobj.mappinginfo
    }

    num_electrodes = 0
    python_obj = new PythonObject()
    has_lfp_manager = python_obj.hasattr(cellDistributor, "_lfp_manager")
    if( has_lfp_manager != 0 ) {
        num_electrodes = cellDistributor._lfp_manager.get_number_electrodes(activegid, pop_info)
        lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nSoma, pop_info)
    }
    pc.nrnbbcore_register_mapping(activegid, "soma", secvec, segvec, lfp_factors, num_electrodes )
    indexSec = indexSec + nSoma
    // gather axonal compartments and register with neuron

    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    forsec cellref.axonal {
        nSec = nSec + 1
        val = sectionNo( cellref )
        sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nAxon )
        nrnpython( commstr.s )
        nAxon = pyobj.mappinginfo
    }

    if( has_lfp_manager != 0 ) {
        lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nAxon, pop_info)
    }
    pc.nrnbbcore_register_mapping(activegid, "axon", secvec, segvec, lfp_factors, num_electrodes )
    indexSec = indexSec + nAxon
    // gather basal compartments and register with neuron

    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    forsec cellref.basal {
        nSec = nSec + 1
        val = sectionNo( cellref )
        sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nDend )
        nrnpython( commstr.s )
        nDend = pyobj.mappinginfo
    }

    if( has_lfp_manager != 0 ) {
        lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nDend, pop_info)
    }
    pc.nrnbbcore_register_mapping(activegid, "dend", secvec, segvec, lfp_factors, num_electrodes )
    indexSec = indexSec + nDend

    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    // gather apical compartments and register with neuron

    forsec cellref.apical {
        nSec = nSec + 1
        val = sectionNo( cellref )
        sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nApic )
        nrnpython( commstr.s )
        nApic = pyobj.mappinginfo
    }

    if( has_lfp_manager != 0 ) {
        lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nApic, pop_info)
    }
    pc.nrnbbcore_register_mapping(activegid, "apic", secvec, segvec, lfp_factors, num_electrodes )
    indexSec = indexSec + nApic

    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    result = execute1( "{AIS}", cellref, 0 )
    if( result != 0 ) {
        forsec cellref.AIS {
            nSec = nSec + 1
            val = sectionNo( cellref )
            sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nAis )
            nrnpython( commstr.s )
            nAis = pyobj.mappinginfo
        }
        if( has_lfp_manager != 0 ) {
            lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nAis, pop_info)
        }
        pc.nrnbbcore_register_mapping(activegid, "ais", secvec, segvec, lfp_factors, num_electrodes )
        indexSec = indexSec + nAis
    }

    // gather nodal compartments and register with neuron
    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    result = execute1( "{nodal}", cellref, 0 )
    if( result != 0 ) {
        forsec cellref.nodal {
            nSec = nSec + 1
            val = sectionNo( cellref )
            sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nNode )
            nrnpython( commstr.s )
            nNode = pyobj.mappinginfo
        }
        if( has_lfp_manager != 0 ) {
            lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nNode, pop_info)
        }
        pc.nrnbbcore_register_mapping(activegid, "node", secvec, segvec, lfp_factors, num_electrodes )
        indexSec = indexSec + nNode
    }

    // gather myelinated compartments and register with neuron
    nSec = 0
    secvec = new Vector()
    segvec = new Vector()
    lfp_factors = new Vector()

    result = execute1( "{myelinated}", cellref, 0 )
    if( result != 0 ) {
        forsec cellref.myelinated {
            nSec = nSec + 1
            val = sectionNo( cellref )
            sprint( commstr.s, "mappinginfo = mapping.getNodeID( %d, %d )", val, nMyel )
            nrnpython( commstr.s )
            nMyel = pyobj.mappinginfo
        }
        if( has_lfp_manager != 0 ) {
            lfp_factors = cellDistributor._lfp_manager.read_lfp_factors(activegid, indexSec, nMyel, pop_info)
        }
        pc.nrnbbcore_register_mapping(activegid, "myelin", secvec, segvec, lfp_factors, num_electrodes )
        indexSec = indexSec + nMyel
    }

  }  // end for gidIndex
}
